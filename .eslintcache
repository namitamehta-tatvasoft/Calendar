[{"D:\\Calendar\\calendar\\src\\index.tsx":"1","D:\\Calendar\\calendar\\src\\reportWebVitals.ts":"2","D:\\Calendar\\calendar\\src\\App.tsx":"3","D:\\Calendar\\calendar\\src\\component\\calendar.tsx":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":499162500000,"results":"7","hashOfConfig":"6"},{"size":209,"mtime":1608195487401,"results":"8","hashOfConfig":"6"},{"size":2567,"mtime":1608198406351,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"s0yu9e",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\Calendar\\calendar\\src\\index.tsx",[],["20","21"],"D:\\Calendar\\calendar\\src\\reportWebVitals.ts",[],"D:\\Calendar\\calendar\\src\\App.tsx",[],"D:\\Calendar\\calendar\\src\\component\\calendar.tsx",["22","23","24"],"import React, { Fragment, useEffect, useState, useCallback } from \"react\";\r\nimport moment from \"moment\";\r\nimport \"./calendar.css\";\r\n\r\nexport function Calendar() {\r\n  const [selectedDate, setSelectedDate] = useState(Date);\r\n  const [selectedMonth, setSelectedMonth] = useState<number>(0);\r\n  const [selectedMonthTotalDays, setSelectedMonthDayTotalDays] = useState<\r\n    number\r\n  >(0);\r\n  const [calendarDates, setCalanderDates] = useState<number[]>([]);\r\n\r\n  const _getCurrentState = () => {\r\n    const dayList = moment(selectedDate).daysInMonth();\r\n    setSelectedMonthDayTotalDays(dayList);\r\n    let calendarDate = [];\r\n    for (var i = 1; i <= selectedMonthTotalDays; i++) {\r\n      calendarDate.push(i);\r\n    }\r\n    setCalanderDates(calendarDate);\r\n  };\r\n  const defaulSettings = useCallback(_getCurrentState, []);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"SelectedDate\")) {\r\n      const newSelectedDate = localStorage.getItem(\"SelectedDate\");\r\n      newSelectedDate && setSelectedDate(newSelectedDate);\r\n    }\r\n    const month = moment(selectedDate).month();\r\n    setSelectedMonth(month);\r\n    defaulSettings();\r\n  }, [defaulSettings]);\r\n\r\n  const _changeDate = (newDate: number) => {\r\n    const newSelectedDate = moment(selectedDate).date(newDate).toString();\r\n    setSelectedDate(newSelectedDate);\r\n    localStorage.setItem(\"SelectedDate\", newSelectedDate);\r\n  };\r\n\r\n  const _checkSelectedDate = (item: number) => {\r\n    return moment(selectedDate).date() === item;\r\n  };\r\n\r\n  const _changeMonth = (event: any) => {\r\n    const val = event.target.value;\r\n    const diff = selectedMonth - val;\r\n    const newDate = moment(selectedDate).add(diff, \"M\");\r\n    setSelectedMonth(val);\r\n    _getCurrentState();\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1>Calendar</h1>\r\n      <br />\r\n      <b> {selectedDate} </b>\r\n      <select onClick={_changeMonth}>\r\n        <option selected={selectedMonth === 9} value=\"9\">\r\n          October{\" \"}\r\n        </option>\r\n        <option selected={selectedMonth === 10} value=\"10\">\r\n          November{\" \"}\r\n        </option>\r\n        <option selected={selectedMonth === 11} value=\"11\">\r\n          December{\" \"}\r\n        </option>\r\n      </select>\r\n      <b> {selectedMonth} </b>\r\n      <br />\r\n      <div id=\"Ã§alendar\">\r\n        {calendarDates.map((item) => (\r\n          <div\r\n            className={`${_checkSelectedDate(item) ? \"active\" : \"\"}`}\r\n            onClick={() => _changeDate(item)}\r\n          >\r\n            {\" \"}\r\n            {item}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n",{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":22,"column":56,"nodeType":"31","endLine":22,"endColumn":58,"suggestions":"32"},{"ruleId":"29","severity":1,"message":"33","line":32,"column":6,"nodeType":"31","endLine":32,"endColumn":22,"suggestions":"34"},{"ruleId":"35","severity":1,"message":"36","line":47,"column":11,"nodeType":"37","messageId":"38","endLine":47,"endColumn":18},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'selectedDate' and 'selectedMonthTotalDays'. Either include them or remove the dependency array.","ArrayExpression",["41"],"React Hook useEffect has a missing dependency: 'selectedDate'. Either include it or remove the dependency array.",["42"],"@typescript-eslint/no-unused-vars","'newDate' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},{"desc":"45","fix":"46"},"Update the dependencies array to be: [selectedDate, selectedMonthTotalDays]",{"range":"47","text":"48"},"Update the dependencies array to be: [defaulSettings, selectedDate]",{"range":"49","text":"50"},[813,815],"[selectedDate, selectedMonthTotalDays]",[1134,1150],"[defaulSettings, selectedDate]"]